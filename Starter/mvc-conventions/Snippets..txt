MazeModel.cs
------------------

    public class MazeModel
    {
        public int Size { get; set; }
        public string Algo { get; set; }
        public MazeColor Color { get; set; }
    }


Home/Index.cshtml
--------------------

    <h1 class="display-4">Welcome</h1>
    <form action="/maze" method="post">
        <p>
            Size: <br />
            @Html.TextBoxFor(m => m.Size)
        </p>
        <p>
            Color: <br />
            @Html.DropDownListFor(m => m.Color, new List<SelectListItem>
                   { new SelectListItem{Text="No Color", Value="White"},
                     new SelectListItem{Text="Teal", Value="Teal"},
                     new SelectListItem{Text="Purple", Value="Purple"},
                     new SelectListItem{Text="Mustard", Value="Mustard"},
                     new SelectListItem{Text="Rust", Value="Rust"},
                     new SelectListItem{Text="Green", Value="Green"},
                     new SelectListItem{Text="Blue", Value="Blue"}}, "Please select")
        </p>
        <p>
            Algorithm: <br />
            @Html.DropDownListFor(m => m.Algo, new List<SelectListItem>
                   {
                     new SelectListItem{Text="Aldous-Broder", Value="AldousBroder"},
                     new SelectListItem{Text="Binary Tree", Value="BinaryTree"},
                     new SelectListItem{Text="Hunt and Kill", Value="HuntAndKill"},
                     new SelectListItem{Text="Recursive Backtracker", Value="RecursiveBacktracker"},
                     new SelectListItem{Text="Sidewinder", Value="Sidewinder"},
                   }, "Please select")
        </p>
        <input type="submit" value="Generate Maze" />
    </form>


MazeController.cs
-----------------------------

        public int GetSize(int size)
        {
            int mazeSize = 15;
            if (size > 0)
            {
                mazeSize = size;
            }
            return mazeSize;
        }

        public IMazeAlgorithm GetAlgorithm(string algo)
        {
            IMazeAlgorithm algorithm = new RecursiveBacktracker();
            if (!string.IsNullOrEmpty(algo))
            {
                Assembly assembly = Assembly.GetAssembly(typeof(RecursiveBacktracker));
                Type algoType = assembly.GetType($"maze_library.{algo}", false, true);
                if (algoType != null)
                {
                    algorithm = Activator.CreateInstance(algoType) as IMazeAlgorithm;
                }
            }
            return algorithm;
        }

        public Bitmap Generate(int mazeSize, IMazeAlgorithm algorithm, MazeColor color)
        {
            IMazeGenerator generator =
                new MazeGenerator(
                    new ColorGrid(mazeSize, mazeSize, color),
                    algorithm);

            generator.GenerateMaze();
            Bitmap maze = generator.GetGraphicalMaze(true);
            return maze;
        }

        public static byte[] ConvertToByteArray(Image img)
        {
            using (var stream = new MemoryStream())
            {
                img.Save(stream, System.Drawing.Imaging.ImageFormat.Png);
                return stream.ToArray();
            }
        }


appsettings.Development.json
--------------------------------

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    },
    "Console": {
      "LogLevel": {
        "maze_web":  "Debug"
      }
    }
  }
}


MazeController.cs
-------------------------

            _logger.LogDebug($"{DateTime.Now:G} - Starting maze generation");
            generator.GenerateMaze();
            _logger.LogDebug($"{DateTime.Now:G} - Ending maze generation");

            _logger.LogDebug($"{DateTime.Now:G} - Starting image generation");
            Bitmap maze = generator.GetGraphicalMaze(true);
            _logger.LogDebug($"{DateTime.Now:G} - Ending image generation");
